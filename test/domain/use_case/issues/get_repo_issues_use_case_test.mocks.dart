// Mocks generated by Mockito 5.4.2 from annotations
// in github_search_app/test/domain/use_case/issues/get_repo_issues_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:github_search_app/domain/issues/model/issue.dart' as _i4;
import 'package:github_search_app/domain/issues/service/issues_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [IssuesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIssuesService extends _i1.Mock implements _i2.IssuesService {
  MockIssuesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Issue>> getIssues(
    String? owner,
    String? repo, {
    required int? page,
    bool? tryCache = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIssues,
          [
            owner,
            repo,
          ],
          {
            #page: page,
            #tryCache: tryCache,
          },
        ),
        returnValue: _i3.Future<List<_i4.Issue>>.value(<_i4.Issue>[]),
      ) as _i3.Future<List<_i4.Issue>>);
}
